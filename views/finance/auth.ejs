<% layout("./layouts/boilerplate") -%>
<br>
<h2>Profin</h2>
<br>
<p>A finance partner that helps manage finances..</p>
<p>Money is not saved just by earning but by managing...</p>
<button class="btn btn-dark me-2" data-bs-toggle="modal" data-bs-target="#sign-in">Login</button>
<button class="btn btn-outline-dark" data-bs-toggle="modal" data-bs-target="#sign-up">Sign Up</button>

<!-- sign-in form  -->
<div class="modal fade" id="sign-in" tabindex="-1" aria-labelledby="loginModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="loginModalLabel">Login</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="loginForm">
            <div class="mb-3">
              <label for="loginEmail" class="form-label">Email address</label>
              <input type="email" class="form-control" id="loginEmail" required>
            </div>
            <div class="mb-3">
              <label for="loginPassword" class="form-label">Password</label>
              <input type="password" class="form-control" id="loginPassword" required>
            </div>
            <div class="d-grid">
              <button type="submit" class="btn btn-primary">Login</button>
            </div>
          </form>
          <hr>
          <div class="d-grid">
            <button type="button" class="btn btn-outline-danger mb-2" id="googleLogin">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-google me-2" viewBox="0 0 16 16">
                <path d="M15.545 6.558a9.42 9.42 0 0 1 .139 1.626c0 2.434-.87 4.492-2.384 5.885h.002C11.978 15.292 10.158 16 8 16A8 8 0 1 1 8 0a7.689 7.689 0 0 1 5.352 2.082l-2.284 2.284A4.347 4.347 0 0 0 8 3.166c-2.087 0-3.86 1.408-4.492 3.304a4.792 4.792 0 0 0 0 3.063h.003c.635 1.893 2.405 3.301 4.492 3.301 1.078 0 2.004-.276 2.722-.764h-.003a3.702 3.702 0 0 0 1.599-2.431H8v-3.08h7.545z"/>
              </svg>
              Login with Google
            </button>
          </div>
          <p class="text-center mt-3">Don't have an account? <a href="#" data-bs-toggle="modal" data-bs-target="#sign-up" data-bs-dismiss="modal">Sign up</a></p>
        </div>
      </div>
    </div>
</div>

<!-- sign-up form  -->
<div class="modal fade" id="sign-up" tabindex="-1" aria-labelledby="signupModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="signupModalLabel">Create an Account</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="signupForm">
            <div class="mb-3">
              <label for="signupName" class="form-label">Full Name</label>
              <input type="text" class="form-control" id="signupName" required>
            </div>
            <div class="mb-3">
              <label for="signupEmail" class="form-label">Email address</label>
              <input type="email" class="form-control" id="signupEmail" required>
            </div>
            <div class="mb-3">
              <label for="signupPassword" class="form-label">Password</label>
              <input type="password" class="form-control" id="signupPassword" required>
            </div>
            <div class="mb-3">
              <label for="signupConfirmPassword" class="form-label">Confirm Password</label>
              <input type="password" class="form-control" id="signupConfirmPassword" required>
            </div>
            <div class="d-grid">
              <button type="submit" class="btn btn-primary">Sign Up</button>
            </div>
          </form>
          <hr>
          <div class="d-grid">
            <button type="button" class="btn btn-outline-danger" id="googleSignup">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-google me-2" viewBox="0 0 16 16">
                <path d="M15.545 6.558a9.42 9.42 0 0 1 .139 1.626c0 2.434-.87 4.492-2.384 5.885h.002C11.978 15.292 10.158 16 8 16A8 8 0 1 1 8 0a7.689 7.689 0 0 1 5.352 2.082l-2.284 2.284A4.347 4.347 0 0 0 8 3.166c-2.087 0-3.86 1.408-4.492 3.304a4.792 4.792 0 0 0 0 3.063h.003c.635 1.893 2.405 3.301 4.492 3.301 1.078 0 2.004-.276 2.722-.764h-.003a3.702 3.702 0 0 0 1.599-2.431H8v-3.08h7.545z"/>
              </svg>
              Sign up with Google
            </button>
          </div>
          <p class="text-center mt-3">Already have an account? <a href="#" data-bs-toggle="modal" data-bs-target="#sign-in" data-bs-dismiss="modal">Login</a></p>
        </div>
      </div>
    </div>
</div>

<script>
	
// public/js/auth.js
// Firebase Authentication
alert("Firebase authentication running..");
document.addEventListener('DOMContentLoaded', function() {
    // Firebase configuration
    const firebaseConfig = {
        apiKey: "AIzaSyBuivDdvluDDClxATsuBmIvzSB9d4QL3Yk",
        authDomain: "profin-af77e.firebaseapp.com",
        projectId: "profin-af77e",
        storageBucket: "profin-af77e.firebasestorage.app",
        messagingSenderId: "726610950490",
        appId: "1:726610950490:web:7a1278a30981e815dc1b63",
        measurementId: "G-QS2ESZ7T59"
    };

  
    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);
    
    // Reference to auth and firestore
    const auth = firebase.auth();
    const db = firebase.firestore();
    
    // Check if user is already logged in
    auth.onAuthStateChanged(user => {
      if (user) {
        // User is signed in
        const currentPage = window.location.pathname;
        
        if (currentPage.includes('index.html') || currentPage === '/') {
          // Redirect to dashboard if on login page
          window.location.href = '/finance';
        } else if (currentPage.includes('dashboard.html')) {
          // Set user display name in dashboard
          const userDisplayName = document.getElementById('userDisplayName');
          if (userDisplayName) {
            userDisplayName.textContent = user.displayName || user.email;
          }
          
          // Load user's transactions
          if (typeof loadTransactions === 'function') {
            loadTransactions();
          }
        }
      } else {
        // No user is signed in
        const currentPage = window.location.pathname;
        
        if (currentPage.includes('dashboard.html')) {
          // Redirect to login page if on dashboard
          window.location.href = 'index.html';
        }
      }
    });
    
    // Login form
    const loginForm = document.getElementById('loginForm');
    if (loginForm) {
      loginForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const email = document.getElementById('loginEmail').value;
        const password = document.getElementById('loginPassword').value;
        
        auth.signInWithEmailAndPassword(email, password)
          .then(() => {
            // Redirect to dashboard
            window.location.href = 'dashboard.html';
          })
          .catch(error => {
            alert('Error: ' + error.message);
          });
      });
    }
    
    // Signup form
    const signupForm = document.getElementById('signupForm');
    if (signupForm) {
      signupForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const name = document.getElementById('signupName').value;
        const email = document.getElementById('signupEmail').value;
        const password = document.getElementById('signupPassword').value;
        const confirmPassword = document.getElementById('signupConfirmPassword').value;
        
        if (password !== confirmPassword) {
          alert('Passwords do not match');
          return;
        }
        
        auth.createUserWithEmailAndPassword(email, password)
          .then(userCredential => {
            // Update user profile with name
            return userCredential.user.updateProfile({
              displayName: name
            });
          })
          .then(() => {
            // Create user document in Firestore
            return db.collection('users').doc(auth.currentUser.uid).set({
              name: name,
              email: email,
              createdAt: firebase.firestore.FieldValue.serverTimestamp()
            });
          })
          .then(() => {
            // Redirect to dashboard
            window.location.href = 'dashboard.html';
          })
          .catch(error => {
            alert('Error: ' + error.message);
          });
      });
    }
    
    // Google login
    const googleLogin = document.getElementById('googleLogin');
    if (googleLogin) {
      googleLogin.addEventListener('click', function() {
        const provider = new firebase.auth.GoogleAuthProvider();
        auth.signInWithPopup(provider)
          .then(() => {
            // Redirect to dashboard
            window.location.href = 'dashboard.html';
          })
          .catch(error => {
            alert('Error: ' + error.message);
          });
      });
    }
    
    // Google signup
    const googleSignup = document.getElementById('googleSignup');
    if (googleSignup) {
      googleSignup.addEventListener('click', function() {
        const provider = new firebase.auth.GoogleAuthProvider();
        auth.signInWithPopup(provider)
          .then(result => {
            // Check if user is new
            if (result.additionalUserInfo.isNewUser) {
              // Create user document in Firestore
              return db.collection('users').doc(auth.currentUser.uid).set({
                name: result.user.displayName,
                email: result.user.email,
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
              });
            }
          })
          .then(() => {
            // Redirect to dashboard
            window.location.href = 'dashboard.html';
          })
          .catch(error => {
            alert('Error: ' + error.message);
          });
      });
    }
    
    // Logout button
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
      logoutBtn.addEventListener('click', function() {
        auth.signOut()
          .then(() => {
            window.location.href = 'index.html';
          })
          .catch(error => {
            alert('Error: ' + error.message);
          });
      });
    }
  });
</script>